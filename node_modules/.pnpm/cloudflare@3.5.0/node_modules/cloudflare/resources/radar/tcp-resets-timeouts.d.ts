import { APIResource } from "../../resource.js";
import * as Core from "../../core.js";
import * as TCPResetsTimeoutsAPI from "./tcp-resets-timeouts.js";
export declare class TCPResetsTimeouts extends APIResource {
    /**
     * Percentage distribution by connection stage of TCP connections terminated within
     * the first 10 packets by a reset or timeout, for a given time period.
     */
    summary(query?: TCPResetsTimeoutSummaryParams, options?: Core.RequestOptions): Core.APIPromise<TCPResetsTimeoutSummaryResponse>;
    summary(options?: Core.RequestOptions): Core.APIPromise<TCPResetsTimeoutSummaryResponse>;
    /**
     * Percentage distribution by connection stage of TCP connections terminated within
     * the first 10 packets by a reset or timeout, over time.
     */
    timeseriesGroups(query?: TCPResetsTimeoutTimeseriesGroupsParams, options?: Core.RequestOptions): Core.APIPromise<TCPResetsTimeoutTimeseriesGroupsResponse>;
    timeseriesGroups(options?: Core.RequestOptions): Core.APIPromise<TCPResetsTimeoutTimeseriesGroupsResponse>;
}
export interface TCPResetsTimeoutSummaryResponse {
    meta: TCPResetsTimeoutSummaryResponse.Meta;
    summary_0: TCPResetsTimeoutSummaryResponse.Summary0;
}
export declare namespace TCPResetsTimeoutSummaryResponse {
    interface Meta {
        dateRange: Array<Meta.DateRange>;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Summary0 {
        /**
         * Connection resets within the first 10 packets from the client, but after the
         * server has received multiple data packets.
         */
        later_in_flow: string;
        /**
         * All other connections.
         */
        no_match: string;
        /**
         * Connection resets or timeouts after the server received both a SYN packet and an
         * ACK packet, meaning the connection was successfully established.
         */
        post_ack: string;
        /**
         * Connection resets or timeouts after the server received a packet with PSH flag
         * set, following connection establishment.
         */
        post_psh: string;
        /**
         * Connection resets or timeouts after the server received only a single SYN
         * packet.
         */
        post_syn: string;
    }
}
export interface TCPResetsTimeoutTimeseriesGroupsResponse {
    meta: TCPResetsTimeoutTimeseriesGroupsResponse.Meta;
    serie_0: TCPResetsTimeoutTimeseriesGroupsResponse.Serie0;
}
export declare namespace TCPResetsTimeoutTimeseriesGroupsResponse {
    interface Meta {
        aggInterval: string;
        dateRange: Array<Meta.DateRange>;
        lastUpdated: string;
        confidenceInfo?: Meta.ConfidenceInfo;
    }
    namespace Meta {
        interface DateRange {
            /**
             * Adjusted end of date range.
             */
            endTime: string;
            /**
             * Adjusted start of date range.
             */
            startTime: string;
        }
        interface ConfidenceInfo {
            annotations?: Array<ConfidenceInfo.Annotation>;
            level?: number;
        }
        namespace ConfidenceInfo {
            interface Annotation {
                dataSource: string;
                description: string;
                eventType: string;
                isInstantaneous: boolean;
                endTime?: string;
                linkedUrl?: string;
                startTime?: string;
            }
        }
    }
    interface Serie0 {
        /**
         * Connection resets within the first 10 packets from the client, but after the
         * server has received multiple data packets.
         */
        later_in_flow: Array<string>;
        /**
         * All other connections.
         */
        no_match: Array<string>;
        /**
         * Connection resets or timeouts after the server received both a SYN packet and an
         * ACK packet, meaning the connection was successfully established.
         */
        post_ack: Array<string>;
        /**
         * Connection resets or timeouts after the server received a packet with PSH flag
         * set, following connection establishment.
         */
        post_psh: Array<string>;
        /**
         * Connection resets or timeouts after the server received only a single SYN
         * packet.
         */
        post_syn: Array<string>;
        timestamps: Array<string>;
    }
}
export interface TCPResetsTimeoutSummaryParams {
    /**
     * Array of comma separated list of ASNs, start with `-` to exclude from results.
     * For example, `-174, 3356` excludes results from AS174, but includes results from
     * AS3356.
     */
    asn?: Array<string>;
    /**
     * Array of comma separated list of continents (alpha-2 continent codes). Start
     * with `-` to exclude from results. For example, `-EU,NA` excludes results from
     * Europe, but includes results from North America.
     */
    continent?: Array<string>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<string>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of comma separated list of locations (alpha-2 country codes). Start with
     * `-` to exclude from results. For example, `-US,PT` excludes results from the US,
     * but includes results from PT.
     */
    location?: Array<string>;
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
}
export interface TCPResetsTimeoutTimeseriesGroupsParams {
    /**
     * Aggregation interval results should be returned in (for example, in 15 minutes
     * or 1 hour intervals). Refer to
     * [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/).
     */
    aggInterval?: '15m' | '1h' | '1d' | '1w';
    /**
     * Array of comma separated list of ASNs, start with `-` to exclude from results.
     * For example, `-174, 3356` excludes results from AS174, but includes results from
     * AS3356.
     */
    asn?: Array<string>;
    /**
     * Array of comma separated list of continents (alpha-2 continent codes). Start
     * with `-` to exclude from results. For example, `-EU,NA` excludes results from
     * Europe, but includes results from North America.
     */
    continent?: Array<string>;
    /**
     * End of the date range (inclusive).
     */
    dateEnd?: Array<string>;
    /**
     * For example, use `7d` and `7dControl` to compare this week with the previous
     * week. Use this parameter or set specific start and end dates (`dateStart` and
     * `dateEnd` parameters).
     */
    dateRange?: Array<string>;
    /**
     * Array of datetimes to filter the start of a series.
     */
    dateStart?: Array<string>;
    /**
     * Format results are returned in.
     */
    format?: 'JSON' | 'CSV';
    /**
     * Array of comma separated list of locations (alpha-2 country codes). Start with
     * `-` to exclude from results. For example, `-US,PT` excludes results from the US,
     * but includes results from PT.
     */
    location?: Array<string>;
    /**
     * Array of names that will be used to name the series in responses.
     */
    name?: Array<string>;
}
export declare namespace TCPResetsTimeouts {
    export import TCPResetsTimeoutSummaryResponse = TCPResetsTimeoutsAPI.TCPResetsTimeoutSummaryResponse;
    export import TCPResetsTimeoutTimeseriesGroupsResponse = TCPResetsTimeoutsAPI.TCPResetsTimeoutTimeseriesGroupsResponse;
    export import TCPResetsTimeoutSummaryParams = TCPResetsTimeoutsAPI.TCPResetsTimeoutSummaryParams;
    export import TCPResetsTimeoutTimeseriesGroupsParams = TCPResetsTimeoutsAPI.TCPResetsTimeoutTimeseriesGroupsParams;
}
//# sourceMappingURL=tcp-resets-timeouts.d.ts.map