"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withZephyrPartial = withZephyrPartial;
const zephyr_agent_1 = require("zephyr-agent");
const extract_vite_assets_map_1 = require("./internal/extract/extract_vite_assets_map");
function withZephyrPartial() {
    const { zephyr_engine_defer, zephyr_defer_create } = zephyr_agent_1.ZephyrEngine.defer_create();
    let resolve_vite_internal_options;
    const vite_internal_options_defer = new Promise((resolve) => {
        resolve_vite_internal_options = resolve;
    });
    return {
        name: 'with-zephyr-partial',
        apply: 'build',
        enforce: 'post',
        configResolved: async (config) => {
            zephyr_defer_create({
                builder: 'vite',
                context: config.root,
            });
            resolve_vite_internal_options({
                root: config.root,
                configFile: config.configFile,
                outDir: config.build.outDir,
                publicDir: config.publicDir,
            });
        },
        writeBundle: async (options, bundle) => {
            const vite_internal_options = await vite_internal_options_defer;
            vite_internal_options.dir = options.dir;
            vite_internal_options.assets = bundle;
        },
        closeBundle: async () => {
            var _a;
            try {
                const vite_internal_options = await vite_internal_options_defer;
                const zephyr_engine = await zephyr_engine_defer;
                const application_uid = zephyr_engine.application_uid;
                // context import ^
                const assetsMap = await (0, extract_vite_assets_map_1.extract_vite_assets_map)(zephyr_engine, vite_internal_options);
                await (0, zephyr_agent_1.savePartialAssetMap)(application_uid, (_a = vite_internal_options.configFile) !== null && _a !== void 0 ? _a : 'partial', assetsMap);
                // todo: initially partial build doesn't have deploy, but code below could enable it if needed
                // await zephyr_engine.upload_assets({
                //   assetsMap,
                //   // todo: this should be updated if we have remotes
                //   buildStats: await zeBuildDashData(zephyr_engine),
                // });
            }
            catch (error) {
                (0, zephyr_agent_1.logFn)('error', zephyr_agent_1.ZephyrError.format(error));
            }
        },
    };
}
//# sourceMappingURL=vite-plugin-zephyr-partial.js.map