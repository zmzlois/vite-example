"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extract_vite_assets_map = extract_vite_assets_map;
const zephyr_agent_1 = require("zephyr-agent");
const load_static_assets_1 = require("./load_static_assets");
async function extract_vite_assets_map(zephyr_engine, vite_internal_options) {
    const application_uid = zephyr_engine.application_uid;
    const assets = await (0, load_static_assets_1.loadStaticAssets)(vite_internal_options);
    const partialAssetMap = await (0, zephyr_agent_1.getPartialAssetMap)(application_uid);
    await (0, zephyr_agent_1.removePartialAssetMap)(application_uid);
    const runtime_assets = vite_internal_options.assets;
    const complete_assets = Object.assign({}, assets, ...Object.values(partialAssetMap !== null && partialAssetMap !== void 0 ? partialAssetMap : {}), runtime_assets);
    return (0, zephyr_agent_1.buildAssetsMap)(complete_assets, extractBuffer, getAssetType);
}
function getAssetType(asset) {
    return asset.type;
}
/**
 * Extracts buffer content from Rollup assets.
 *
 * @param asset - Output chunk or asset from Rollup
 * @returns String for text-based chunks, Buffer for binary assets, undefined for unknown
 *   types
 */
function extractBuffer(asset) {
    switch (asset.type) {
        case 'chunk':
            return asset.code;
        case 'asset':
            if (typeof asset.source === 'string') {
                return asset.source;
            }
            return Buffer.from(asset.source);
        default:
            return undefined;
    }
}
//# sourceMappingURL=extract_vite_assets_map.js.map