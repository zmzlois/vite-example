"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.load_resolved_remotes = load_resolved_remotes;
const zephyr_agent_1 = require("zephyr-agent");
const runtime_plugin_1 = require("./runtime_plugin");
const runtime_plugins_parser_1 = require("./runtime_plugins_parser");
function load_resolved_remotes(resolved_remotes, code) {
    const startTime = Date.now();
    try {
        const runtimePluginsExtraction = (0, runtime_plugins_parser_1.parseRuntimePlugin)(code);
        if (!runtimePluginsExtraction)
            return code;
        const { pluginsArray, startIndex, endIndex } = runtimePluginsExtraction;
        // Add Zephyr plugin to the array
        // We need to add a Zephyr plugin to the end of the array
        // The array is in format: [plugin1(), plugin2(), ...] or []
        let updatedPluginsArray;
        const runtimePlugin = (0, runtime_plugin_1.generateRuntimePlugin)(resolved_remotes);
        if (pluginsArray === '[]') {
            // Handle empty array case
            updatedPluginsArray = `[${runtimePlugin}]`;
        }
        else {
            // Handle non-empty array case
            updatedPluginsArray = pluginsArray.replace(/\]$/, `, ${runtimePlugin}]`);
        }
        // Replace the original array with the updated one
        const updatedCode = code.substring(0, startIndex) + updatedPluginsArray + code.substring(endIndex);
        const endTime = Date.now();
        zephyr_agent_1.ze_log.remotes(`load_resolved_remotes took ${endTime - startTime}ms`);
        return updatedCode;
    }
    catch (error) {
        zephyr_agent_1.ze_log.remotes('Error in load_resolved_remotes:', error);
        return code; // Return original code in case of error
    }
}
//# sourceMappingURL=load_resolved_remotes.js.map