"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateRuntimePlugin = generateRuntimePlugin;
function generateRuntimePlugin(resolved_remotes) {
    const remoteMap = Object.fromEntries(resolved_remotes.map((remote) => [remote.name, remote]));
    const runtimePlugin = {
        name: 'zephyr-runtime-remote-resolver',
        beforeInit: (args) => {
            const resolvedRemoteMap = JSON.parse('__REMOTE_MAP__');
            const _windows = typeof window !== 'undefined' ? window : globalThis;
            args.userOptions.remotes.forEach((remote) => {
                const resolvedRemote = resolvedRemoteMap[remote.name];
                if (!resolvedRemote)
                    return;
                const sessionEdgeURL = _windows.sessionStorage.getItem(resolvedRemote.application_uid);
                const urlOverwrite = sessionEdgeURL !== null && sessionEdgeURL !== void 0 ? sessionEdgeURL : resolvedRemote.remote_entry_url;
                // @ts-expect-error overwriting entry if needed
                remote.entry = urlOverwrite;
            });
            return args;
        },
    };
    return objectToTemplate(runtimePlugin).replace('__REMOTE_MAP__', JSON.stringify(remoteMap));
}
function objectToTemplate(obj) {
    const entries = Object.entries(obj).map(([key, value]) => {
        if (typeof value === 'function') {
            return `${key}: ${value.toString()}`;
        }
        else if (typeof value === 'object' && value !== null) {
            return `${key}: ${objectToTemplate(value)}`;
        }
        else if (typeof value === 'string') {
            return `${key}: "${value}"`;
        }
        else {
            return `${key}: ${value}`;
        }
    });
    return `{ ${entries.join(', ')} }`;
}
//# sourceMappingURL=runtime_plugin.js.map