"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseRuntimePlugin = parseRuntimePlugin;
const tslib_1 = require("tslib");
const acorn_1 = tslib_1.__importDefault(require("acorn"));
const acorn_walk_1 = tslib_1.__importDefault(require("acorn-walk"));
const zephyr_agent_1 = require("zephyr-agent");
function parseRuntimePlugin(code) {
    // Parse the code into an AST
    const ast = acorn_1.default.parse(code, {
        ecmaVersion: 'latest',
        sourceType: 'module',
        locations: true,
        ranges: true,
    });
    let pluginsArrayNode;
    // Find the plugins array in the runtimeInit call
    acorn_walk_1.default.simple(ast, {
        CallExpression(node) {
            var _a, _b;
            if (((_a = node.callee) === null || _a === void 0 ? void 0 : _a.name) === 'runtimeInit' && ((_b = node.arguments) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                const initArg = node.arguments[0];
                if (initArg.type === 'ObjectExpression') {
                    for (const prop of initArg.properties) {
                        if (prop.key.type === 'Identifier' &&
                            prop.key.name === 'plugins' &&
                            prop.value.type === 'ArrayExpression') {
                            pluginsArrayNode = prop.value;
                            break;
                        }
                    }
                }
            }
        },
    });
    if (!pluginsArrayNode ||
        !('start' in pluginsArrayNode) ||
        !('end' in pluginsArrayNode)) {
        zephyr_agent_1.ze_log.mf('Could not find plugins array in remote entry');
        return undefined;
    }
    // Extract the plugins array
    const startIndex = pluginsArrayNode.start;
    const endIndex = pluginsArrayNode.end;
    const pluginsArray = code.slice(startIndex, endIndex);
    return { pluginsArray, startIndex, endIndex };
}
//# sourceMappingURL=runtime_plugins_parser.js.map