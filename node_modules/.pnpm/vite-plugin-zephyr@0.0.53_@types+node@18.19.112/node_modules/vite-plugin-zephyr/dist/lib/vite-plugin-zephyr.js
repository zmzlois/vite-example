"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withZephyr = withZephyr;
const vite_1 = require("@module-federation/vite");
const zephyr_agent_1 = require("zephyr-agent");
const extract_mf_plugin_1 = require("./internal/extract/extract_mf_plugin");
const extract_vite_assets_map_1 = require("./internal/extract/extract_vite_assets_map");
const extract_mf_vite_remotes_1 = require("./internal/mf-vite-etl/extract-mf-vite-remotes");
const load_resolved_remotes_1 = require("./internal/mf-vite-etl/load_resolved_remotes");
function withZephyr(_options) {
    const mfConfig = _options === null || _options === void 0 ? void 0 : _options.mfConfig;
    const plugins = [];
    if (mfConfig) {
        plugins.push(...(0, vite_1.federation)(mfConfig));
    }
    plugins.push(zephyrPlugin());
    return plugins;
}
function zephyrPlugin() {
    const { zephyr_engine_defer, zephyr_defer_create } = zephyr_agent_1.ZephyrEngine.defer_create();
    let resolve_vite_internal_options;
    const vite_internal_options_defer = new Promise((resolve) => {
        resolve_vite_internal_options = resolve;
    });
    let root;
    let baseHref = '/';
    let mfPlugin;
    return {
        name: 'with-zephyr',
        enforce: 'post',
        configResolved: async (config) => {
            var _a, _b;
            root = config.root;
            baseHref = config.base || '/';
            if (config.command === 'serve')
                return;
            zephyr_defer_create({
                builder: 'vite',
                context: config.root,
            });
            resolve_vite_internal_options({
                root: config.root,
                outDir: (_a = config.build) === null || _a === void 0 ? void 0 : _a.outDir,
                publicDir: config.publicDir,
            });
            mfPlugin = (0, extract_mf_plugin_1.extract_mf_plugin)((_b = config.plugins) !== null && _b !== void 0 ? _b : []);
        },
        transform: async (code, id) => {
            try {
                if (!id.includes('virtual:mf-REMOTE_ENTRY_ID') || !mfPlugin)
                    return code;
                const dependencyPairs = (0, extract_mf_vite_remotes_1.extract_remotes_dependencies)(root, mfPlugin._options);
                if (!dependencyPairs)
                    return code;
                const zephyr_engine = await zephyr_engine_defer;
                const resolved_remotes = await zephyr_engine.resolve_remote_dependencies(dependencyPairs);
                if (!resolved_remotes)
                    return code;
                return (0, load_resolved_remotes_1.load_resolved_remotes)(resolved_remotes, code);
            }
            catch (error) {
                (0, zephyr_agent_1.logFn)('error', zephyr_agent_1.ZephyrError.format(error));
                // returns the original code in case of error
                return code;
            }
        },
        closeBundle: async () => {
            try {
                const [vite_internal_options, zephyr_engine] = await Promise.all([
                    vite_internal_options_defer,
                    zephyr_engine_defer,
                ]);
                zephyr_engine.buildProperties.baseHref = baseHref;
                await zephyr_engine.start_new_build();
                const assetsMap = await (0, extract_vite_assets_map_1.extract_vite_assets_map)(zephyr_engine, vite_internal_options);
                await zephyr_engine.upload_assets({
                    assetsMap,
                    buildStats: await (0, zephyr_agent_1.zeBuildDashData)(zephyr_engine),
                });
                await zephyr_engine.build_finished();
            }
            catch (error) {
                (0, zephyr_agent_1.logFn)('error', zephyr_agent_1.ZephyrError.format(error));
            }
        },
    };
}
//# sourceMappingURL=vite-plugin-zephyr.js.map