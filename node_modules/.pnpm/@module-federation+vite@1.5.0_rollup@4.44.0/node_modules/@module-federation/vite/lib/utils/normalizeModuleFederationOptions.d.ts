import { SharedConfig, ShareStrategy } from '@module-federation/runtime/types';
export type RemoteEntryType = 'var' | 'module' | 'assign' | 'assign-properties' | 'this' | 'window' | 'self' | 'global' | 'commonjs' | 'commonjs2' | 'commonjs-module' | 'commonjs-static' | 'amd' | 'amd-require' | 'umd' | 'umd2' | 'jsonp' | 'system' | string;
interface ExposesItem {
    import: string;
}
export interface NormalizedShared {
    [key: string]: ShareItem;
}
export interface RemoteObjectConfig {
    type?: string;
    name: string;
    entry: string;
    entryGlobalName?: string;
    shareScope?: string;
}
export declare function normalizeRemotes(remotes: Record<string, string | RemoteObjectConfig> | undefined): Record<string, RemoteObjectConfig>;
export interface ShareItem {
    name: string;
    version: string | undefined;
    scope: string;
    from: string;
    shareConfig: SharedConfig;
}
interface ManifestOptions {
    filePath?: string;
    disableAssetsAnalyze?: boolean;
    fileName?: string;
}
export type ModuleFederationOptions = {
    exposes?: Record<string, string | {
        import: string;
    }> | undefined;
    filename?: string;
    library?: any;
    name: string;
    remotes?: Record<string, string | RemoteObjectConfig> | undefined;
    runtime?: any;
    shareScope?: string;
    shared?: string[] | Record<string, string | {
        name?: string;
        version?: string;
        shareScope?: string;
        singleton?: boolean;
        requiredVersion?: string;
        strictVersion?: boolean;
    }> | undefined;
    runtimePlugins?: string[];
    getPublicPath?: string;
    implementation?: string;
    manifest?: ManifestOptions | boolean;
    dev?: boolean | PluginDevOptions;
    dts?: boolean | PluginDtsOptions;
    shareStrategy?: ShareStrategy;
    ignoreOrigin?: boolean;
    virtualModuleDir?: string;
};
export interface NormalizedModuleFederationOptions {
    exposes: Record<string, ExposesItem>;
    filename: string;
    library: any;
    name: string;
    remotes: Record<string, RemoteObjectConfig>;
    runtime: any;
    shareScope: string;
    shared: NormalizedShared;
    runtimePlugins: string[];
    implementation: string;
    manifest: ManifestOptions | boolean;
    dev?: boolean | PluginDevOptions;
    dts?: boolean | PluginDtsOptions;
    shareStrategy: ShareStrategy;
    getPublicPath?: string;
    ignoreOrigin?: boolean;
    virtualModuleDir: string;
}
interface PluginDevOptions {
    disableLiveReload?: boolean;
    disableHotTypesReload?: boolean;
    disableDynamicRemoteTypeHints?: boolean;
}
interface PluginDtsOptions {
    generateTypes?: boolean | DtsRemoteOptions;
    consumeTypes?: boolean | DtsHostOptions;
    tsConfigPath?: string;
}
interface DtsRemoteOptions {
    tsConfigPath?: string;
    typesFolder?: string;
    deleteTypesFolder?: boolean;
    additionalFilesToCompile?: string[];
    compilerInstance?: 'tsc' | 'vue-tsc';
    compileInChildProcess?: boolean;
    generateAPITypes?: boolean;
    extractThirdParty?: boolean;
    extractRemoteTypes?: boolean;
    abortOnError?: boolean;
}
interface DtsHostOptions {
    typesFolder?: string;
    abortOnError?: boolean;
    remoteTypesFolder?: string;
    deleteTypesFolder?: boolean;
    maxRetries?: number;
    consumeAPITypes?: boolean;
}
export declare function getNormalizeModuleFederationOptions(): NormalizedModuleFederationOptions;
export declare function getNormalizeShareItem(key: string): ShareItem;
export declare function normalizeModuleFederationOptions(options: ModuleFederationOptions): NormalizedModuleFederationOptions;
export {};
