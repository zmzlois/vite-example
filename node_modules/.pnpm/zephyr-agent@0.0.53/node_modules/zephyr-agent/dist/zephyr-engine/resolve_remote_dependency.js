"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolve_remote_dependency = resolve_remote_dependency;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const zephyr_edge_contract_1 = require("zephyr-edge-contract");
const errors_1 = require("../lib/errors");
const logging_1 = require("../lib/logging");
const token_1 = require("../lib/node-persist/token");
async function resolve_remote_dependency({ application_uid, version, platform, build_context, }) {
    const resolveDependency = new URL(`${zephyr_edge_contract_1.ze_api_gateway.resolve}/${encodeURIComponent(application_uid)}/${encodeURIComponent(version)}`, (0, zephyr_edge_contract_1.ZE_API_ENDPOINT)());
    if (platform) {
        resolveDependency.searchParams.append('build_target', platform);
    }
    if (build_context) {
        resolveDependency.searchParams.append('build_context', build_context);
    }
    try {
        logging_1.ze_log.remotes('URL for resolving dependency:', resolveDependency.toString());
        const token = await (0, token_1.getToken)();
        const res = await axios_1.default.get(resolveDependency.toString(), {
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${token}`,
                Accept: 'application/json',
            },
        });
        // used only for error logging
        const [appName, projectName, orgName] = application_uid.split('.');
        // Check response status
        if (res.status < 200 || res.status >= 300) {
            throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_RESOLVE_REMOTES, {
                appUid: application_uid,
                appName,
                projectName,
                orgName,
                version,
                data: {
                    url: resolveDependency.toString(),
                    error: res.data,
                },
            });
        }
        const response = res.data;
        if (response.value) {
            logging_1.ze_log.remotes('resolved dependency:', response.value, 'application_uid: ', application_uid, 'version: ', version);
            return Object.assign({}, response.value, { version, platform });
        }
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_RESOLVE_REMOTES, {
            appUid: application_uid,
            appName,
            projectName,
            orgName,
            version,
            data: { response },
        });
    }
    catch (cause) {
        if (cause instanceof errors_1.ZephyrError)
            throw cause;
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_CANNOT_RESOLVE_APP_NAME_WITH_VERSION, {
            version,
            cause,
        });
    }
}
//# sourceMappingURL=resolve_remote_dependency.js.map