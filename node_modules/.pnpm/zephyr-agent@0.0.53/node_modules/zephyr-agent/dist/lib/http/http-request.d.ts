/** Http request wrapper that returns a tuple with the response data or an error. */
export type HttpResponse<T> = [ok: true, error: null, data: T] | [ok: false, error: Error];
export type UrlString = string | URL | {
    path: string;
    base?: string;
    query: Record<string, string | number | boolean>;
};
/** Parses the URL string into a URL object */
export declare function parseUrl(urlStr: UrlString): URL;
/** Main HTTP request function that handles the request and response */
export declare function makeHttpRequest<T = void>(url: URL, options?: RequestInit, data?: string | Buffer): Promise<HttpResponse<T>>;
/** Creates a request that returns a promise for the HTTP response */
export declare function makeRequest<T = void>(urlStr: UrlString, options?: RequestInit, data?: string | Buffer): Promise<HttpResponse<T>>;
/** Transforms `Promise<HttpResponse<T>>` into `Promise<T>` */
export declare function unwrapResponse<T>(response: Promise<HttpResponse<T>>): Promise<T>;
