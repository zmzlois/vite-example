"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.get_hash_list = get_hash_list;
exports.update_hash_list = update_hash_list;
const get_application_hash_list_1 = require("../edge-requests/get-application-hash-list");
const get_cache_key_1 = require("./get-cache-key");
const hash_cache_1 = require("../node-persist/hash-cache");
async function get_hash_list(application_uid) {
    const cacheKey = await (0, get_cache_key_1.getCacheKey)(application_uid);
    const local_hash_list = await (0, hash_cache_1.getAppHashCache)(cacheKey);
    if (local_hash_list) {
        return { hash_set: new Set(local_hash_list.hashes) };
    }
    const remote_hash_list = await (0, get_application_hash_list_1.getApplicationHashList)({ application_uid });
    if (remote_hash_list) {
        await (0, hash_cache_1.setAppHashCache)(cacheKey, remote_hash_list);
        return { hash_set: new Set(remote_hash_list.hashes) };
    }
    return { hash_set: new Set() };
}
async function update_hash_list(application_uid, assetsMap) {
    const cacheKey = await (0, get_cache_key_1.getCacheKey)(application_uid);
    const local_hash_list = await (0, hash_cache_1.getAppHashCache)(cacheKey);
    const hashes = Object.keys(assetsMap);
    const new_hashes = new Set([...((local_hash_list === null || local_hash_list === void 0 ? void 0 : local_hash_list.hashes) || []), ...hashes]);
    await (0, hash_cache_1.setAppHashCache)(cacheKey, { hashes: Array.from(new_hashes).sort() });
}
//# sourceMappingURL=distributed-hash-control.js.map