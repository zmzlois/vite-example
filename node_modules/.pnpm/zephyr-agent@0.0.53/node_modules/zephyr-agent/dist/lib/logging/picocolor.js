"use strict";
// ISC License
Object.defineProperty(exports, "__esModule", { value: true });
exports.bgWhiteBright = exports.bgCyanBright = exports.bgMagentaBright = exports.bgBlueBright = exports.bgYellowBright = exports.bgGreenBright = exports.bgRedBright = exports.bgBlackBright = exports.whiteBright = exports.cyanBright = exports.magentaBright = exports.blueBright = exports.yellowBright = exports.greenBright = exports.redBright = exports.blackBright = exports.bgWhite = exports.bgCyan = exports.bgMagenta = exports.bgBlue = exports.bgYellow = exports.bgGreen = exports.bgRed = exports.bgBlack = exports.gray = exports.white = exports.cyan = exports.purple = exports.magenta = exports.blue = exports.yellow = exports.green = exports.red = exports.black = exports.strikethrough = exports.hidden = exports.inverse = exports.underline = exports.italic = exports.dim = exports.bold = exports.reset = exports.isTTY = void 0;
// Copyright (c) 2021 Alexey Raspopov, Kostiantyn Denysov, Anton Verinov
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// https://github.com/alexeyraspopov/picocolors/blob/b6261487e7b81aaab2440e397a356732cad9e342/picocolors.js#L1
const debug_enabled_1 = require("./debug-enabled");
const node_tty_1 = require("node:tty");
exports.isTTY = (!debug_enabled_1.is_debug_enabled && !process.env['NO_COLOR'] && process.env['FORCE_COLOR']) ||
    ((0, node_tty_1.isatty)(process.stdout.fd) && !process.env['CI'] && process.env['TERM'] !== 'dumb');
// const enabled = env
const replaceClose = (str, close, replace, index) => {
    const start = str.substring(0, index) + replace;
    const end = str.substring(index + close.length);
    const nextIndex = end.indexOf(close);
    return ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end;
};
const formatter = (open, close, replace = open) => {
    if (!exports.isTTY)
        return String;
    return (input) => {
        const string = '' + input;
        const index = string.indexOf(close, open.length);
        return ~index
            ? open + replaceClose(string, close, replace, index) + close
            : open + string + close;
    };
};
// text styles
exports.reset = exports.isTTY ? (s) => `\x1b[0m${s}\x1b[0m` : String;
exports.bold = formatter('\x1b[1m', '\x1b[22m', '\x1b[22m\x1b[1m');
exports.dim = formatter('\x1b[2m', '\x1b[22m', '\x1b[22m\x1b[2m');
exports.italic = formatter('\x1b[3m', '\x1b[23m');
exports.underline = formatter('\x1b[4m', '\x1b[24m');
exports.inverse = formatter('\x1b[7m', '\x1b[27m');
exports.hidden = formatter('\x1b[8m', '\x1b[28m');
exports.strikethrough = formatter('\x1b[9m', '\x1b[29m');
// text colors
exports.black = formatter('\x1b[30m', '\x1b[39m');
exports.red = formatter('\x1b[31m', '\x1b[39m');
exports.green = formatter('\x1b[32m', '\x1b[39m');
exports.yellow = formatter('\x1b[33m', '\x1b[39m');
exports.blue = formatter('\x1b[34m', '\x1b[39m');
exports.magenta = formatter('\x1b[35m', '\x1b[39m');
exports.purple = formatter('\x1b[38;2;173;127;168m', '\x1b[39m');
exports.cyan = formatter('\x1b[36m', '\x1b[39m');
exports.white = formatter('\x1b[37m', '\x1b[39m');
exports.gray = formatter('\x1b[90m', '\x1b[39m');
// background colors
exports.bgBlack = formatter('\x1b[40m', '\x1b[49m');
exports.bgRed = formatter('\x1b[41m', '\x1b[49m');
exports.bgGreen = formatter('\x1b[42m', '\x1b[49m');
exports.bgYellow = formatter('\x1b[43m', '\x1b[49m');
exports.bgBlue = formatter('\x1b[44m', '\x1b[49m');
exports.bgMagenta = formatter('\x1b[45m', '\x1b[49m');
exports.bgCyan = formatter('\x1b[46m', '\x1b[49m');
exports.bgWhite = formatter('\x1b[47m', '\x1b[49m');
// special text colors
exports.blackBright = formatter('\x1b[90m', '\x1b[39m');
exports.redBright = formatter('\x1b[91m', '\x1b[39m');
exports.greenBright = formatter('\x1b[92m', '\x1b[39m');
exports.yellowBright = formatter('\x1b[93m', '\x1b[39m');
exports.blueBright = formatter('\x1b[94m', '\x1b[39m');
exports.magentaBright = formatter('\x1b[95m', '\x1b[39m');
exports.cyanBright = formatter('\x1b[96m', '\x1b[39m');
exports.whiteBright = formatter('\x1b[97m', '\x1b[39m');
// special background colors
exports.bgBlackBright = formatter('\x1b[100m', '\x1b[49m');
exports.bgRedBright = formatter('\x1b[101m', '\x1b[49m');
exports.bgGreenBright = formatter('\x1b[102m', '\x1b[49m');
exports.bgYellowBright = formatter('\x1b[103m', '\x1b[49m');
exports.bgBlueBright = formatter('\x1b[104m', '\x1b[49m');
exports.bgMagentaBright = formatter('\x1b[105m', '\x1b[49m');
exports.bgCyanBright = formatter('\x1b[106m', '\x1b[49m');
exports.bgWhiteBright = formatter('\x1b[107m', '\x1b[49m');
//# sourceMappingURL=picocolor.js.map