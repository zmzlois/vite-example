"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ze_log = exports.brightRedBgName = exports.brightGreenBgName = exports.brightYellowBgName = exports.brightBlueBgName = exports.dimmedName = void 0;
// light weight functions for decorated console.error + able to toggle different parts of whole module's logging result
const debug_1 = require("debug");
const picocolor_1 = require("./picocolor");
//TODO: this should be traced and logged into new relic
const name = ' ZEPHYR ';
exports.dimmedName = (0, picocolor_1.dim)(name);
exports.brightBlueBgName = (0, picocolor_1.bold)((0, picocolor_1.bgCyanBright)((0, picocolor_1.black)(name)));
exports.brightYellowBgName = (0, picocolor_1.bold)((0, picocolor_1.bgYellowBright)((0, picocolor_1.black)(name)));
exports.brightGreenBgName = (0, picocolor_1.bold)((0, picocolor_1.bgGreenBright)((0, picocolor_1.black)(name)));
exports.brightRedBgName = (0, picocolor_1.bold)((0, picocolor_1.bgRedBright)((0, picocolor_1.black)(name)));
const createLogger = () => {
    return {
        app: (0, debug_1.debug)('zephyr:app'),
        auth: (0, debug_1.debug)('zephyr:auth'),
        config: (0, debug_1.debug)('zephyr:config'),
        git: (0, debug_1.debug)('zephyr:git'),
        http: (0, debug_1.debug)('zephyr:http'),
        init: (0, debug_1.debug)('zephyr:init'),
        mf: (0, debug_1.debug)('zephyr:mf'),
        misc: (0, debug_1.debug)('zephyr:misc'),
        package: (0, debug_1.debug)('zephyr:package'),
        remotes: (0, debug_1.debug)('zephyr:remotes'),
        snapshot: (0, debug_1.debug)('zephyr:snapshot'),
        upload: (0, debug_1.debug)('zephyr:upload'),
    };
};
/**
 * Debug contexts:
 *
 * - Ze_log.app: Application config information
 * - Ze_log.auth: Authentication and token management
 * - Ze_log.config: Authentication and token management
 * - Ze_log.git: Git configuration and provider
 * - Ze_log.http: http requests
 * - Ze_log.init: Initialization and setup operations
 * - Ze_log.mf: Module Federation config
 * - Ze_log.misc: Miscellaneous
 * - Ze_log.package: Package.json parsing
 * - Ze_log.remotes: Remote dependency resolution
 * - Ze_log.snapshot: Snapshot publish
 * - Ze_log.upload: Asset and build stats upload
 */
exports.ze_log = createLogger();
// If debug mode is not enabled just print whatever console output is
// If debug mode is enabled print the error from our end
//# sourceMappingURL=debug.js.map