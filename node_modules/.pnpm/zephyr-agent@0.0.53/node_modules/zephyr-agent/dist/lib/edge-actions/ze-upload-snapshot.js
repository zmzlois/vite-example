"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zeUploadSnapshot = zeUploadSnapshot;
const errors_1 = require("../errors");
const upload_snapshot_1 = require("../http/upload-snapshot");
const picocolor_1 = require("../logging/picocolor");
async function zeUploadSnapshot(zephyr_engine, { snapshot }) {
    var _a;
    const zeStart = Date.now();
    const application_uid = zephyr_engine.application_uid;
    const logger = await zephyr_engine.logger;
    const buildEnv = zephyr_engine.env.isCI ? 'ci' : 'local';
    const edgeTodo = await (0, upload_snapshot_1.uploadSnapshot)({
        body: snapshot,
        application_uid,
    });
    const versionUrl = (_a = edgeTodo === null || edgeTodo === void 0 ? void 0 : edgeTodo.urls) === null || _a === void 0 ? void 0 : _a.version;
    if (!versionUrl) {
        logger({
            level: 'error',
            action: 'snapshot:upload:failed',
            message: `failed uploading of ${buildEnv} snapshot to zephyr`,
        });
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_SNAPSHOT_UPLOADS_NO_RESULTS);
    }
    logger({
        level: 'info',
        action: 'snapshot:upload:done',
        message: `Uploaded ${(0, picocolor_1.green)(buildEnv)} snapshot in ${(0, picocolor_1.yellow)(`${Date.now() - zeStart}`)}ms`,
    });
    return versionUrl;
}
//# sourceMappingURL=ze-upload-snapshot.js.map