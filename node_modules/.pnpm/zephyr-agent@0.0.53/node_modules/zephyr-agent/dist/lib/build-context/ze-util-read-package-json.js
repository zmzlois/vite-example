"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageJson = getPackageJson;
const tslib_1 = require("tslib");
const node_fs_1 = tslib_1.__importDefault(require("node:fs"));
const node_path_1 = require("node:path");
const zephyr_edge_contract_1 = require("zephyr-edge-contract");
const errors_1 = require("../errors");
const logging_1 = require("../logging");
const find_nearest_package_json_1 = require("./find-nearest-package-json");
const ze_util_parse_ze_dependencies_1 = require("./ze-util-parse-ze-dependencies");
/**
 * Retrieves and parses the package.json file from the given context path or current
 * working directory. The function will search for the nearest package.json file in the
 * directory tree, validate its contents, and cache the result to improve performance.
 *
 * @param context - The starting path to search for package.json. If undefined, uses
 *   current working directory.
 * @returns {Promise<ZePackageJson>} A Promise that resolves to the parsed package.json
 *   content.
 * @throws {ZephyrError} If the package.json cannot be found, parsed, or has missing
 *   required fields.
 */
async function getPackageJson(context) {
    // Determine the starting path
    let startingPath;
    try {
        startingPath = context || process.cwd();
        // If the path is a file, move up one directory level
        if (startingPath && node_fs_1.default.statSync(startingPath).isFile()) {
            startingPath = (0, node_path_1.resolve)(startingPath, '..');
        }
        logging_1.ze_log.package('getPackageJson searching from path', startingPath);
    }
    catch (error) {
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_PACKAGE_JSON_NOT_FOUND, `Invalid starting path: ${context}. Error: ${error}`);
    }
    // Find nearest package.json
    let nearest_package_json;
    try {
        nearest_package_json = await (0, find_nearest_package_json_1.find_nearest_package_json)(startingPath);
        if (!nearest_package_json) {
            throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_PACKAGE_JSON_NOT_FOUND, `No package.json found starting from: ${startingPath}`);
        }
        logging_1.ze_log.package('Found package.json at', nearest_package_json.path);
    }
    catch (error) {
        if (error instanceof errors_1.ZephyrError) {
            throw error; // Re-throw existing ZephyrError
        }
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_PACKAGE_JSON_NOT_FOUND, `Error finding package.json from path: ${startingPath}. Error: ${error}`);
    }
    // Parse and validate package.json
    try {
        const { json, path: packageJsonPath } = nearest_package_json;
        const parsed_package_json = (0, zephyr_edge_contract_1.safe_json_parse)(json);
        if (!parsed_package_json) {
            throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_PACKAGE_JSON_NOT_VALID, `Invalid JSON in package.json at: ${packageJsonPath}`);
        }
        // Validate required fields
        if (!parsed_package_json.name) {
            throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_PACKAGE_JSON_MUST_HAVE_NAME_VERSION, `Missing 'name' field in package.json at: ${packageJsonPath}`);
        }
        if (!parsed_package_json.version) {
            throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_PACKAGE_JSON_MUST_HAVE_NAME_VERSION, `Missing 'version' field in package.json at: ${packageJsonPath}`);
        }
        const zephyr_dependencies = parsed_package_json['zephyr:dependencies'];
        if (zephyr_dependencies) {
            parsed_package_json.zephyrDependencies = (0, ze_util_parse_ze_dependencies_1.parseZeDependencies)(zephyr_dependencies);
        }
        logging_1.ze_log.package('Successfully parsed package.json', {
            name: parsed_package_json.name,
            version: parsed_package_json.version,
            path: packageJsonPath,
        });
        return parsed_package_json;
    }
    catch (error) {
        if (error instanceof errors_1.ZephyrError) {
            throw error; // Re-throw existing ZephyrError
        }
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_PACKAGE_JSON_NOT_VALID, `Error processing package.json: ${error}`);
    }
}
//# sourceMappingURL=ze-util-read-package-json.js.map