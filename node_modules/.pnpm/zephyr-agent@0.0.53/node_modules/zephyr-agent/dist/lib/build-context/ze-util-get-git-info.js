"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGitInfo = getGitInfo;
const tslib_1 = require("tslib");
const is_ci_1 = tslib_1.__importDefault(require("is-ci"));
const node_child_process_1 = require("node:child_process");
const node_crypto_1 = require("node:crypto");
const node_util_1 = require("node:util");
const errors_1 = require("../errors");
const logging_1 = require("../logging");
const secret_token_1 = require("../node-persist/secret-token");
const git_provider_utils_1 = require("./git-provider-utils");
const exec = (0, node_util_1.promisify)(node_child_process_1.exec);
/** Loads the git information from the current repository. */
async function getGitInfo() {
    const hasToken = (0, secret_token_1.hasSecretToken)();
    const { name, email, remoteOrigin, branch, commit, tags, stdout } = await loadGitInfo(hasToken);
    if (!hasToken && (!name || !email)) {
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_NO_GIT_USERNAME_EMAIL, {
            data: { stdout },
        });
    }
    const app = parseGitUrl(remoteOrigin, stdout);
    const gitInfo = {
        git: { name, email, branch, commit, tags },
        app,
    };
    logging_1.ze_log.git('Loaded: git info', gitInfo);
    return gitInfo;
}
/** Loads all data in a single command to avoid multiple executions. */
async function loadGitInfo(hasSecretToken) {
    const automated = is_ci_1.default || hasSecretToken;
    // ensures multi line output on errors doesn't break the parsing
    const delimiter = (0, node_crypto_1.randomUUID)().repeat(2);
    const command = [
        // Inside CI environments, the last committer should be the actor
        // and not the actual logged git user which sometimes might just be a bot
        automated ? "git log -1 --pretty=format:'%an'" : 'git config user.name',
        automated ? "git log -1 --pretty=format:'%ae'" : 'git config user.email',
        // TODO: support remote names that are not 'origin'
        'git config --get remote.origin.url',
        'git rev-parse --abbrev-ref HEAD',
        'git rev-parse HEAD',
        'git tag --points-at HEAD',
    ].join(` && echo ${delimiter} && `);
    try {
        const { stdout } = await exec(command);
        const [name, email, remoteOrigin, branch, commit, tagsOutput] = stdout
            .trim()
            .split(delimiter)
            .map((x) => x.trim());
        // Parse tags - if multiple tags point to HEAD, they'll be on separate lines
        const tags = tagsOutput ? tagsOutput.split('\n').filter(Boolean) : [];
        return {
            name,
            email,
            remoteOrigin,
            branch,
            commit,
            tags,
            stdout,
        };
    }
    catch (cause) {
        const error = cause;
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_NO_GIT_INFO, {
            cause,
            data: { command, delimiter },
            message: (error === null || error === void 0 ? void 0 : error.stderr) || error.message,
        });
    }
}
/**
 * Parses the git url using the `git-url-parse` package.
 *
 * This package differentiates CI providers and handles git info from various platforms
 * like GitHub, GitLab, Bitbucket, and custom git deployments.
 */
function parseGitUrl(remoteOrigin, stdout) {
    if (!remoteOrigin) {
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_GIT_REMOTE_ORIGIN, {
            data: { stdout },
        });
    }
    try {
        const gitInfo = (0, git_provider_utils_1.getGitProviderInfo)(remoteOrigin);
        logging_1.ze_log.git(`Git provider detected: ${gitInfo.provider}`, {
            provider: gitInfo.provider,
            owner: gitInfo.owner,
            project: gitInfo.project,
            isEnterprise: gitInfo.isEnterprise,
        });
        return {
            org: gitInfo.owner,
            project: gitInfo.project,
        };
    }
    catch (cause) {
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_NO_GIT_INFO, {
            message: stdout,
            cause,
            data: { stdout },
        });
    }
}
//# sourceMappingURL=ze-util-get-git-info.js.map