"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseZeDependencies = parseZeDependencies;
exports.parseZeDependency = parseZeDependency;
function parseZeDependencies(ze_dependencies) {
    return Object.fromEntries(Object.entries(ze_dependencies).map(([key, value]) => [
        key,
        parseZeDependency(key, value),
    ]));
}
/**
 * Parses a single dependency value into a structured ZeDependency object.
 *
 * @param key - The dependency name
 * @param value - The dependency version or reference string
 * @returns Structured dependency information
 */
function parseZeDependency(key, value) {
    // Default dependency structure
    const dependency = {
        version: value,
        registry: 'zephyr',
        app_uid: key,
    };
    let reference = value;
    if (reference === 'workspace:*') {
        return dependency;
    }
    // if reference variable has ':' then cut it off and store dependency.registry
    if (reference.includes(':')) {
        const reference_parts = reference.split(':');
        dependency.registry = reference_parts[0];
        reference = reference_parts[1];
    }
    // Check if it contains a remote app_uid with a tag (e.g., "remote_app_uid@latest")
    if (reference.includes('@')) {
        const reference_parts = reference.split('@');
        // consider scoped application names
        // e.g.: @app-zephyr/host@latest
        dependency.app_uid = reference_parts.slice(0, reference_parts.length - 1).join('@');
        dependency.version = reference_parts[reference_parts.length - 1];
    }
    // If it's a semver specification (contains ^, ~, >, <, or =)
    else {
        dependency.version = reference;
    }
    return dependency;
}
//# sourceMappingURL=ze-util-parse-ze-dependencies.js.map