"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGitProviderInfo = getGitProviderInfo;
const tslib_1 = require("tslib");
const git_url_parse_1 = tslib_1.__importDefault(require("git-url-parse"));
const errors_1 = require("../errors");
// Standard Git provider domains mapping
const STANDARD_DOMAINS = {
    'github.com': 'github',
    'gitlab.com': 'gitlab',
    'bitbucket.org': 'bitbucket',
};
/**
 * Git provider detection and information extraction. In Zephyr, application_uid is
 * created as: [app_name, git_repo, git_org].join('.') where app_name comes from
 * package.json name field, not from the git URL.
 */
function getGitProviderInfo(gitUrl) {
    var _a;
    if (!gitUrl) {
        throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_GIT_REMOTE_ORIGIN);
    }
    const parsed = (0, git_url_parse_1.default)(gitUrl);
    const resource = parsed.resource.toLowerCase();
    // Determine provider type and enterprise status from resource domain
    const provider = (_a = STANDARD_DOMAINS[resource]) !== null && _a !== void 0 ? _a : 'custom';
    const isEnterprise = provider === 'custom';
    // Extract owner based on provider and enterprise status
    const owner = isEnterprise
        ? extractEnterpriseOwner(parsed)
        : extractStandardOwner(parsed, provider);
    // Extract project name
    const project = extractProjectName(parsed, provider, isEnterprise);
    return { provider, owner, project, isEnterprise };
}
/** Extracts organization name from enterprise domain */
function extractEnterpriseOwner(parsed) {
    const domainParts = parsed.resource.split('.');
    // For domains like gitlab.company.com, use company.com as the base
    const baseDomain = domainParts.length > 2 ? domainParts.slice(1).join('.') : parsed.resource;
    // Replace dots with hyphens
    return baseDomain.replace(/\./g, '-').toLowerCase();
}
/** Extracts owner from standard domain providers with special handling */
function extractStandardOwner(parsed, provider) {
    const rawOwner = parsed.owner.toLowerCase();
    // For GitLab and Bitbucket with subgroups, extract just the first part as the owner
    if ((provider === 'gitlab' || provider === 'bitbucket') && rawOwner.includes('/')) {
        return rawOwner.split('/')[0];
    }
    return rawOwner;
}
/** Extracts project name based on provider and URL structure */
function extractProjectName(parsed, provider, isEnterprise) {
    // Special handling for self-hosted GitLab with deep subgroups
    if (isEnterprise && provider === 'gitlab' && parsed.pathname) {
        const pathParts = parsed.pathname.split('/').filter(Boolean);
        // For deep subgroup paths in self-hosted GitLab, use the last part
        if (pathParts.length > 2) {
            return pathParts[pathParts.length - 1].replace('.git', '').toLowerCase();
        }
    }
    // For all other cases, use the name property directly
    return parsed.name.toLowerCase();
}
//# sourceMappingURL=git-provider-utils.js.map